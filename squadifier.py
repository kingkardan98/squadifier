# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'squadifier.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

childList = []

import os, inflect, platform, subprocess
import operator as op
import numpy as np
from openpyxl import load_workbook
from PyQt5 import QtCore, QtGui, QtWidgets
from child import Child
from functools import partial

_translate = QtCore.QCoreApplication.translate

class Ui_Squadifier(object):
    def setupUi(self, Squadifier):
        Squadifier.setObjectName("Squadifier")
        Squadifier.resize(659, 484)
        font = QtGui.QFont()
        font.setFamily("Arial")
        Squadifier.setFont(font)
        self.addBtn = QtWidgets.QPushButton(Squadifier)
        self.addBtn.setGeometry(QtCore.QRect(520, 380, 113, 32))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.addBtn.setFont(font)
        self.addBtn.setObjectName("addBtn")
        self.generateBtn = QtWidgets.QPushButton(Squadifier)
        self.generateBtn.setGeometry(QtCore.QRect(310, 389, 113, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.generateBtn.setFont(font)
        self.generateBtn.setStyleSheet("background-color: rgba(46, 204, 113, 0.4); border-radius: 10; border: 0.5px solid rgba(105, 105, 105, 0.5)")
        self.generateBtn.setObjectName("generateBtn")
        self.importBtn = QtWidgets.QPushButton(Squadifier)
        self.importBtn.setGeometry(QtCore.QRect(520, 420, 113, 32))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.importBtn.setFont(font)
        self.importBtn.setObjectName("importBtn")
        self.titleLbl = QtWidgets.QLabel(Squadifier)
        self.titleLbl.setGeometry(QtCore.QRect(200, 10, 411, 61))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(48)
        font.setBold(True)
        font.setWeight(75)
        self.titleLbl.setFont(font)
        self.titleLbl.setObjectName("titleLbl")
        self.geoLbl = QtWidgets.QLabel(Squadifier)
        self.geoLbl.setGeometry(QtCore.QRect(170, 190, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.geoLbl.setFont(font)
        self.geoLbl.setObjectName("geoLbl")
        self.nameLbl = QtWidgets.QLabel(Squadifier)
        self.nameLbl.setGeometry(QtCore.QRect(170, 100, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.nameLbl.setFont(font)
        self.nameLbl.setObjectName("nameLbl")
        self.surnameLbl = QtWidgets.QLabel(Squadifier)
        self.surnameLbl.setGeometry(QtCore.QRect(170, 130, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.surnameLbl.setFont(font)
        self.surnameLbl.setObjectName("surnameLbl")
        self.ageLbl = QtWidgets.QLabel(Squadifier)
        self.ageLbl.setGeometry(QtCore.QRect(170, 160, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.ageLbl.setFont(font)
        self.ageLbl.setObjectName("ageLbl")
        self.nameEdit = QtWidgets.QLineEdit(Squadifier)
        self.nameEdit.setGeometry(QtCore.QRect(330, 100, 201, 21))
        self.nameEdit.setObjectName("nameEdit")
        self.surnameEdit = QtWidgets.QLineEdit(Squadifier)
        self.surnameEdit.setGeometry(QtCore.QRect(330, 130, 201, 21))
        self.surnameEdit.setObjectName("surnameEdit")
        self.ageEdit = QtWidgets.QLineEdit(Squadifier)
        self.ageEdit.setGeometry(QtCore.QRect(330, 160, 201, 21))
        self.ageEdit.setObjectName("ageEdit")
        self.geoEdit = QtWidgets.QLineEdit(Squadifier)
        self.geoEdit.setGeometry(QtCore.QRect(330, 190, 201, 21))
        self.geoEdit.setObjectName("geoEdit")
        self.msgLbl = QtWidgets.QLabel(Squadifier)
        self.msgLbl.setGeometry(QtCore.QRect(120, 329, 411, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.msgLbl.setFont(font)
        self.msgLbl.setObjectName("msgLbl")
        self.recordLbl = QtWidgets.QLabel(Squadifier)
        self.recordLbl.setGeometry(QtCore.QRect(120, 270, 221, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.recordLbl.setFont(font)
        self.recordLbl.setObjectName("recordLbl")
        self.recordVar = QtWidgets.QLabel(Squadifier)
        self.recordVar.setGeometry(QtCore.QRect(340, 270, 221, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.recordVar.setFont(font)
        self.recordVar.setObjectName("recordVar")
        self.nameLbl_2 = QtWidgets.QLabel(Squadifier)
        self.nameLbl_2.setGeometry(QtCore.QRect(120, 400, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.nameLbl_2.setFont(font)
        self.nameLbl_2.setObjectName("nameLbl_2")
        self.squadEdit = QtWidgets.QLineEdit(Squadifier)
        self.squadEdit.setGeometry(QtCore.QRect(190, 400, 113, 21))
        self.squadEdit.setObjectName("squadEdit")
        self.actionhandle_add = QtWidgets.QAction(Squadifier)
        self.actionhandle_add.setObjectName("actionhandle_add")
        self.actionhandle_generate = QtWidgets.QAction(Squadifier)
        self.actionhandle_generate.setObjectName("actionhandle_generate")
        self.actionhandle_import = QtWidgets.QAction(Squadifier)
        self.actionhandle_import.setObjectName("actionhandle_import")

        self.retranslateUi(Squadifier)
        self.addBtn.clicked.connect(self.handle_add) # type: ignore
        self.generateBtn.clicked.connect(self.handle_generate) # type: ignore
        self.importBtn.clicked.connect(self.handle_import) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Squadifier)

    def clearLbls(self, labels):
            for label in labels:
                label.clear()

    def startFile(self, filepath):
        if platform.system() == 'Darwin':       # macOS
            subprocess.call(('open', filepath))
        elif platform.system() == 'Windows':    # Windows
            os.startfile(filepath)
        else:                                   # linux variants
            subprocess.call(('xdg-open', filepath))

    def getData(self):
        file_filter = 'Data file (*.xlsx *.csv *.dat);; Excel File (*.xlsx *.xls)'
        response = QtWidgets.QFileDialog.getOpenFileName(
            parent=None, # This inherits the type of the window above it, which goes arount the Ui_Squadifier class and inherits QMainWindow.
            directory=os.getcwd(),
            filter=file_filter,
            initialFilter='Excel File (*.xlsx *.xls)'
        )
        workbook = load_workbook(response[0], data_only=True) # The name of the file is stored in response[0]
        return workbook['Foglio1']

    def handle_add(self, Squadifier):
        name = str(self.nameEdit.text())
        surname = str(self.surnameEdit.text())
        age = str(self.ageEdit.text())
        geo = str(self.geoEdit.text())
        
        if name == '' or surname == '' or age == '' or geo == '':
            self.msgLbl.setStyleSheet("color: orange")
            self.msgLbl.setText(_translate("Sqaudifier", "Impossibile aggiungere record: informazioni mancanti"))
            return
        elif not age.isnumeric():
            self.msgLbl.setStyleSheet("color: orange")
            self.msgLbl.setText(_translate("Squadifier", "L'et√† deve essere un numero"))
            return
        
        newChild = Child(name, surname, age, geo)
        childList.append(newChild)

        self.recordVar.setText(_translate("Squadifier", "{}".format(len(childList))))
        self.msgLbl.setStyleSheet("color: green")
        self.msgLbl.setText(_translate("Sqaudifier", "Record aggiunto: {} {}, {}, {}".format(name, surname, age, geo)))
        labels = [self.nameEdit, self.surnameEdit, self.ageEdit, self.geoEdit]
        self.clearLbls(labels)

    def handle_import(self, Squadifier):
        data = self.getData()
        allRows = list(data.rows)
        for row in allRows:
            if row[0].value == 'nome':
                pass
            else:
                name = row[0].value
                surname = row[1].value
                age = row[2].value
                geo = row[3].value

                newChild = Child(name, surname, age, geo)
                childList.append(newChild)
        
        self.msgLbl.setStyleSheet("color: green")
        self.msgLbl.setText(_translate("Sqaudifier", "File importato correttamente!"))
        self.recordVar.setText(_translate("Squadifier", "{}".format(len(childList))))
        print("Handled")

    def handle_generate(self, Squadifier):
        if self.squadEdit.text() == '':
            self.msgLbl.setStyleSheet("color: red")
            self.msgLbl.setText(_translate("Sqaudifier", "Inserire il numero delle squadre"))
            return
        
        squadNum = int(self.squadEdit.text()) # How many teams we have to generate in the end

        allAges = [child.age for child in childList] # A list of all the kids divided by age

        allAgesArr = np.array(allAges) 
        ageRange = list(np.unique(allAgesArr)) # A way to get all the ages that appear

        p = inflect.engine()
        ageTeams = dict()
        childList_sorted = sorted(childList, key=op.attrgetter('age')) # We sort childList by age...

        for age in ageRange:
            ageTeams[p.number_to_words(age)] = [] # ...and then create an ageTeam appropriately, with key name as word.

        for child in childList_sorted:
            ageTeams[p.number_to_words(child.age)].append(child) # Every child of that age, we set into the same ageTeam

        for age in ageTeams:
            ageTeams[age] = sorted(ageTeams[age], key=op.attrgetter('geo')) # We sort every ageTeam by geolocation.

        squads = [[] for i in range(squadNum)] # We generate the list of teams...
        i = 0 # ...and an iterator, to keep track of which team we are assigning kids to.

        for age in ageTeams:
            for el in ageTeams[age]:
                squads[i].append(el) # We then go around and assign each kid from each ageTeam to a squad.
                i = (i + 1) % squadNum #¬†The iterator is reset every time it reaches squadNum.
        
        with open('squadre{}.txt'.format(squadNum), 'w+') as file:
            for i in range(len(squads)): # Squad file creation
                file.write("Squadra {}:\n".format(i+1))
                for el in squads[i]:
                    file.write("{} {}, {}, {}\n".format(el.name, el.surname, el.age, el.geo)) # We write each kid, in each squad.
                file.write("\n\n")
        
        self.msgLbl.setStyleSheet("color: green")
        self.msgLbl.setText(_translate("Sqaudifier", '<a href="./squadre.txt">Squadre generate! Cliccami per aprire il file</a>'))
        self.squadEdit.clear()
        self.msgLbl.linkActivated.connect(partial(self.startFile, './squadre{}.txt'.format(squadNum)))
    
    def retranslateUi(self, Squadifier):
        Squadifier.setWindowTitle(_translate("Squadifier", "Squadifier"))
        self.addBtn.setText(_translate("Squadifier", "Aggiungi"))
        self.generateBtn.setText(_translate("Squadifier", "Genera"))
        self.importBtn.setText(_translate("Squadifier", "Importa"))
        self.titleLbl.setText(_translate("Squadifier", "Squadifier"))
        self.geoLbl.setText(_translate("Squadifier", "Parrocchia"))
        self.nameLbl.setText(_translate("Squadifier", "Nome"))
        self.surnameLbl.setText(_translate("Squadifier", "Cognome"))
        self.ageLbl.setText(_translate("Squadifier", "Et√†"))
        self.msgLbl.setText(_translate("Squadifier", ""))
        self.recordLbl.setText(_translate("Squadifier", "Record aggiunti:"))
        self.recordVar.setText(_translate("Squadifier", "0"))
        self.nameLbl_2.setText(_translate("Squadifier", "Squadre"))
        self.actionhandle_add.setText(_translate("Squadifier", "handle_add"))
        self.actionhandle_generate.setText(_translate("Squadifier", "handle_generate"))
        self.actionhandle_import.setText(_translate("Squadifier", "handle_import"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Squadifier = QtWidgets.QDialog()
    ui = Ui_Squadifier()
    ui.setupUi(Squadifier)
    Squadifier.show()
    sys.exit(app.exec_())
